name: Deploy to ECS

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: christanyk-flask-xray-repo
  ECS_SERVICE: christanyk-flask-service
  ECS_CLUSTER: christanyk-flask-xray-cluster

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📦 Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: 🐳 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: 🐳 Build, tag, and push Docker image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          cd src
          docker build --cache-from type=local,src=/tmp/.buildx-cache \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: 🛠️ Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: 🧹 Terraform Format Check
        run: terraform fmt -recursive -check -diff
        working-directory: ./terraform

      - name: 📦 Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: 📑 Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      - name: 📊 Terraform Plan
        id: plan
        run: terraform plan -out=tfplan -var="image=${{ steps.build-image.outputs.image }}"
        working-directory: ./terraform

      - name: ✅ Terraform Apply
        run: terraform apply -auto-approve "tfplan"
        working-directory: ./terraform

      - name: 🔍 Verify Deployment
        run: |
          SERVICE_URL=$(terraform output -raw service_url)
          for i in {1..5}; do
            echo "Attempt $i: Checking service at $SERVICE_URL:8080"
            if curl -s "$SERVICE_URL:8080" | jq .; then
              echo "✅ Service responded successfully."
              break
            fi
            echo "❌ Attempt $i failed. Retrying in 10s..."
            sleep 10
          done
        working-directory: ./terraform
